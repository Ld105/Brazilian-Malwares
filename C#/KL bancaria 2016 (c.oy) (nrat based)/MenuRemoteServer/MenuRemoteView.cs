using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MenuRemoteServer
{
    
    public partial class MenuRemoteView : Form
    {
        public RemoteClient remoteClient;
        public Rectangle drawRectangle;

        public MenuRemoteView(RemoteClient remoteClient)
        {
            this.remoteClient = remoteClient;
            InitializeComponent();
        }

        public MenuRemoteView()
        {
            // TODO: Complete member initialization
        }

       public static int w;
       public static int h;

        public void SetFormSize(int x, int y)
        {
                w = x;
                h = y;
        }

        private void MenuRemoteView_Load(object sender, EventArgs e)
        {
                this.SetClientSizeCore(w, h);
         //       this.Text = "Remote-" + this.remoteClient.identification;
                MessageBox.Show("Remote-" + this.remoteClient.identification);
        }

        private void MenuRemoteView_KeyDown(object sender, KeyEventArgs e)
        {
            //this.remoteClient.SendKey(e.KeyCode.ToString());
        }

        private void MenuRemoteView_KeyPress(object sender, KeyPressEventArgs e)
        {
                this.remoteClient.SendKey(e.KeyChar.ToString());
        }

        private void MenuRemoteView_MouseClick(object sender, MouseEventArgs e)
        {
            String button;
            switch(e.Button) {
                case MouseButtons.Right:
                    button = "RightClick";
                    break;
                case MouseButtons.Middle:
                    button = "MiddleClick";
                    break;
                case MouseButtons.Left:
                default:
                    button = "LeftClick";
                    break;
            }

                this.remoteClient.SendMessage(String.Format("<|Mouse|>{0}<!>{1}<!>{2}", button, e.X, e.Y));
        }

        private void MenuRemoteView_MouseDoubleClick(object sender, MouseEventArgs e)
        {
                if (this.remoteClient != null && this.remoteClient.bmpScreenClient != null)
                {
                    this.remoteClient.SendMessage(String.Format("<|Mouse|>{0}<!>{1}", e.X, e.Y));

                    Point pt = this.GetPoint(e.X, e.Y, this.ClientRectangle, this.remoteClient.boundsScreen);
                    //toolStripStatus_value.Text = String.Format(String.Format("<|Mouse|>DoubleClick{0}<!>{1}", pt.X, pt.Y));
                }

        }

        protected override void OnPaintBackground(PaintEventArgs e)
        {
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            Graphics graphics = e.Graphics;
            Brush brush = new SolidBrush(Color.Black);
            Rectangle clientRect = this.ClientRectangle;
            if (this.remoteClient != null && this.remoteClient.bmpScreenClient != null)
            {
                this.remoteClient.mreBmpScreenClientControl.WaitOne();
                this.remoteClient.mreBmpScreenClientShow.Reset();
                Rectangle srcRect = this.remoteClient.boundsScreen;
                Rectangle dstRect = new Rectangle();
                float fRatioSrc = (float)srcRect.Height / srcRect.Width;
                float fRatioClient = (float)clientRect.Height / clientRect.Width;
                if (fRatioSrc > fRatioClient)
                {
                    dstRect.Height = clientRect.Height;
                    dstRect.Y = 0;
                    dstRect.Width = (int)(clientRect.Height / fRatioSrc);
                    dstRect.X = (clientRect.Width - dstRect.Width) / 2;
                    graphics.FillRectangle(brush, 0, 0, dstRect.X, dstRect.Height);
                    graphics.FillRectangle(brush, dstRect.X + dstRect.Width, 0, clientRect.Width, dstRect.Height);
                }
                else
                {
                    dstRect.Width = clientRect.Width;
                    dstRect.X = 0;
                    dstRect.Height = (int)(fRatioSrc * clientRect.Width);
                    dstRect.Y = (clientRect.Height - dstRect.Height) / 2;
                    graphics.FillRectangle(brush, 0, 0, dstRect.Width, dstRect.Y);
                    graphics.FillRectangle(brush, 0, dstRect.Y+dstRect.Height, dstRect.Width, clientRect.Height);
                }
                graphics.DrawImage(this.remoteClient.bmpScreenClient, dstRect, srcRect, GraphicsUnit.Pixel);
                
                this.remoteClient.mreBmpScreenClientShow.Set();
            }
            else
            {
                graphics.FillRectangle(brush, clientRect);
            }
            brush.Dispose();
        }

        private void MenuRemoteView_FormClosed(object sender, FormClosedEventArgs e)
        {
            this.remoteClient.RemoteOff();
        }

        private Point GetPoint(int clientX, int clientY, Rectangle clientRectangle, Rectangle drawSourceRectangle)
        {
            float fRatioSrc = (float)drawSourceRectangle.Height / drawSourceRectangle.Width;
            float fRatioClient = (float)clientRectangle.Height / clientRectangle.Width;
            int drawX, drawY, drawWidth, drawHeight;
            int x, y;
            if (fRatioSrc > fRatioClient)
            {
                drawHeight = clientRectangle.Height;
                drawY = 0;
                drawWidth = (int)(clientRectangle.Height / fRatioSrc);
                drawX = (clientRectangle.Width - drawWidth) / 2;
            }
            else
            {
                drawWidth = clientRectangle.Width;
                drawX = 0;
                drawHeight = (int)(fRatioSrc * clientRectangle.Width);
                drawY = (clientRectangle.Height - drawHeight) / 2;
            }

            x = (clientX - drawX*2) * drawSourceRectangle.Width / drawWidth;
            y = (clientY - drawY*2) * drawSourceRectangle.Height / drawHeight;
            Point point = new Point(x, y);
            return point;
        }

        private void MenuRemoteView_MouseDown(object sender, MouseEventArgs e)
        {
            if (this.remoteClient != null && this.remoteClient.bmpScreenClient != null)
            {
                Rectangle rectangleBounds = this.remoteClient.boundsScreen;
                Point pt = this.GetPoint(e.X, e.Y, this.ClientRectangle, rectangleBounds);
                String button = null;
                switch(e.Button) {
                    case MouseButtons.Left:
                        button = "LeftDown";
                        break;
                    case MouseButtons.Middle:
                        button = "MiddleDown";
                        break;
                    case MouseButtons.Right:
                        button = "RightDown";
                        break;
                }

                if(button != null && pt.X>=0 && pt.X<rectangleBounds.Width && pt.Y>=0 && pt.Y<rectangleBounds.Height) 
                {
                    String message = String.Format("<|Mouse|>{0}<!>{1}<!>{2}", button, pt.X, pt.Y);

                        this.remoteClient.mreMessage.WaitOne();
                        this.remoteClient.queueMessage.AddMessage(message);
                        //toolStripStatus_value.Text = String.Format(message);
                    }
                }
        }

        private void MenuRemoteView_MouseUp(object sender, MouseEventArgs e)
        {
            if (this.remoteClient != null && this.remoteClient.bmpScreenClient != null)
            {
                Rectangle rectangleBounds = this.remoteClient.boundsScreen;
                Point pt = this.GetPoint(e.X, e.Y, this.ClientRectangle, rectangleBounds);
                String button = null;
                switch (e.Button)
                {
                    case MouseButtons.Left:
                        button = "LeftUp";
                        break;
                    case MouseButtons.Middle:
                        button = "MiddleUp";
                        break;
                    case MouseButtons.Right:
                        button = "RightUp";
                        break;
                }

                if (button != null && pt.X >= 0 && pt.X < rectangleBounds.Width && pt.Y >= 0 && pt.Y < rectangleBounds.Height)
                {
                    String message = String.Format("<|Mouse|>{0}<!>{1}<!>{2}", button, pt.X, pt.Y);

                        this.remoteClient.mreMessage.WaitOne();
                        this.remoteClient.queueMessage.AddMessage(message);
                        //toolStripStatus_value.Text = message;
                }
            }
        }

        private void MenuRemoteView_MouseMove(object sender, MouseEventArgs e)
        {
            if (this.remoteClient != null && this.remoteClient.bmpScreenClient != null)
            {
                Rectangle rectangleBounds = this.remoteClient.boundsScreen;
                Point pt = this.GetPoint(e.X, e.Y, this.ClientRectangle, rectangleBounds);
                if (pt.X >= 0 && pt.X < rectangleBounds.Width && pt.Y >= 0 && pt.Y < rectangleBounds.Height)
                {
                    String message = String.Format("<|Mouse|>Move<!>{0}<!>{1}", pt.X, pt.Y);

                        this.remoteClient.mreMessage.WaitOne();
                        this.remoteClient.queueMessage.AddMessage(message);
                        //toolStripStatus_value.Text = message;
                        //this.Text = message;
                }
            }
        }

        private void MenuRemoteView_Resize(object sender, EventArgs e)
        {
            //this.Text = this.Width + " x " + this.Height;
        }
    }
}
